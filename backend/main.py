from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
import openai
import requests
from bs4 import BeautifulSoup
import json
import os
import asyncio
from typing import List, Dict, Any
import logging
from utils import contact_extractor, scraper

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–µ–ª–µ–π", version="1.0.0")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

class LocationRequest(BaseModel):
    location: str

class ContactInfo(BaseModel):
    name: str
    address: str
    coordinates: str
    email: str
    website: str

class CollectionStep(BaseModel):
    step: int
    description: str
    prompt: str

class CollectionPlan(BaseModel):
    steps: List[CollectionStep]

class CollectionResult(BaseModel):
    logs: List[str]
    contacts: List[ContactInfo]

@app.get("/", response_class=HTMLResponse)
async def read_root():
    with open("frontend/index.html", "r", encoding="utf-8") as f:
        return HTMLResponse(content=f.read())

@app.post("/collect-contacts", response_model=CollectionResult)
async def collect_contacts(request: LocationRequest):
    try:
        logs = []
        contacts = []
        
        # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        logs.append(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è: {request.location}")
        
        plan_prompt = f"""
        –°–æ—Å—Ç–∞–≤—å –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω (5-6 —à–∞–≥–æ–≤) –¥–ª—è —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –º–µ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è 
        (–æ—Ç–µ–ª–µ–π, –±–∞–∑ –æ—Ç–¥—ã—Ö–∞, –ø–∞–Ω—Å–∏–æ–Ω–∞—Ç–æ–≤, —Å–∞–Ω–∞—Ç–æ—Ä–∏–µ–≤) –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ "{request.location}".
        
        –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
        {{
            "steps": [
                {{
                    "step": 1,
                    "description": "–û–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞",
                    "prompt": "–ü—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT"
                }}
            ]
        }}
        
        –ö–∞–∂–¥—ã–π —à–∞–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–∏—Å–∫ –∏ —Å–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
        - –ü–æ–∏—Å–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
        - –°–±–æ—Ä –∞–¥—Ä–µ—Å–æ–≤ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        - –ü–æ–∏—Å–∫ email –∞–¥—Ä–µ—Å–æ–≤
        - –ü–æ–∏—Å–∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
        """
        
        logs.append("üìã –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–∞–Ω —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
        
        try:
            plan_response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": plan_prompt}],
                max_tokens=1000
            )
            
            plan_content = plan_response.choices[0].message.content
            logs.append("‚úÖ –ü–ª–∞–Ω —Å–±–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω")
            
            # –ü–∞—Ä—Å–∏–Ω–≥ JSON –ø–ª–∞–Ω–∞
            try:
                plan_data = json.loads(plan_content)
                plan = CollectionPlan(**plan_data)
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ JSON –Ω–µ –ø–∞—Ä—Å–∏—Ç—Å—è, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω
                logs.append("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–ª–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω")
                plan = create_basic_plan(request.location)
                
        except Exception as e:
            logs.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞: {str(e)}")
            plan = create_basic_plan(request.location)
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–æ–≤ –ø–ª–∞–Ω–∞
        intermediate_results = []
        
        for step in plan.steps:
            logs.append(f"üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥ {step.step}: {step.description}")
            
            try:
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞
                step_result = await execute_collection_step(step, request.location, intermediate_results)
                intermediate_results.append(step_result)
                logs.append(f"‚úÖ –®–∞–≥ {step.step} –≤—ã–ø–æ–ª–Ω–µ–Ω")
                
            except Exception as e:
                logs.append(f"‚ùå –û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ {step.step}: {str(e)}")
                continue
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        logs.append("üîç –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
        
        try:
            final_prompt = f"""
            –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–∞—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ {request.location}, 
            —Å—Ñ–æ—Ä–º–∏—Ä—É–π –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
            
            {json.dumps([result for result in intermediate_results if result], ensure_ascii=False, indent=2)}
            
            –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
            {{
                "contacts": [
                    {{
                        "name": "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
                        "address": "–ü–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å",
                        "coordinates": "–ì–µ–æ–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞)",
                        "email": "Email –∞–¥—Ä–µ—Å",
                        "website": "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç"
                    }}
                ]
            }}
            
            –ï—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É–∫–∞–∂–∏ "–ù–µ –Ω–∞–π–¥–µ–Ω–æ".
            """
            
            final_response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": final_prompt}],
                max_tokens=2000
            )
            
            final_content = final_response.choices[0].message.content
            
            try:
                final_data = json.loads(final_content)
                if "contacts" in final_data:
                    contacts = [ContactInfo(**contact) for contact in final_data["contacts"]]
                    logs.append(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
                else:
                    logs.append("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            except json.JSONDecodeError:
                logs.append("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
                
        except Exception as e:
            logs.append(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        
        logs.append("üéâ –°–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        return CollectionResult(logs=logs, contacts=contacts)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {str(e)}")

async def execute_collection_step(step: CollectionStep, location: str, previous_results: List[str]) -> str:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    enhanced_prompt = f"""
    {step.prompt}
    
    –ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: {location}
    
    –ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
    {json.dumps(previous_results, ensure_ascii=False, indent=2)}
    
    –í—ã–ø–æ–ª–Ω–∏ —ç—Ç–æ—Ç —à–∞–≥ –∏ –≤–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ.
    """
    
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": enhanced_prompt}],
            max_tokens=1000
        )
        
        result = response.choices[0].message.content
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        extracted_contacts = contact_extractor.extract_contacts_from_text(result)
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        if any(extracted_contacts.values()):
            enhanced_result = f"""
{result}

--- –ò–ó–í–õ–ï–ß–ï–ù–ù–´–ï –ö–û–ù–¢–ê–ö–¢–´ ---
Email –∞–¥—Ä–µ—Å–∞: {', '.join(extracted_contacts.get('emails', []))}
–¢–µ–ª–µ—Ñ–æ–Ω—ã: {', '.join(extracted_contacts.get('phones', []))}
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {', '.join(extracted_contacts.get('coordinates', []))}
–ê–¥—Ä–µ—Å–∞: {', '.join(extracted_contacts.get('addresses', []))}
"""
            return enhanced_result
        
        return result
        
    except Exception as e:
        return f"O—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞: {str(e)}"

def create_basic_plan(location: str) -> CollectionPlan:
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    
    basic_steps = [
        CollectionStep(
            step=1,
            description="–ü–æ–∏—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–∞—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
            prompt=f"–ù–∞–π–¥–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–∞—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ {location} (—Å–∞–π—Ç—ã —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ä—Ç–∞–ª–æ–≤, —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏, –æ—Ç–∑—ã–≤—ã)"
        ),
        CollectionStep(
            step=2,
            description="–°–±–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π",
            prompt=f"–ò–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑–≤–ª–µ–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç–µ–ª–µ–π, –±–∞–∑ –æ—Ç–¥—ã—Ö–∞, –ø–∞–Ω—Å–∏–æ–Ω–∞—Ç–æ–≤ –∏ —Å–∞–Ω–∞—Ç–æ—Ä–∏–µ–≤ –≤ {location}"
        ),
        CollectionStep(
            step=3,
            description="–ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç",
            prompt=f"–î–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –Ω–∞–π–¥–∏ –∏—Ö –ø–æ—á—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"
        ),
        CollectionStep(
            step=4,
            description="–ü–æ–∏—Å–∫ email –∞–¥—Ä–µ—Å–æ–≤",
            prompt=f"–ù–∞–π–¥–∏ email –∞–¥—Ä–µ—Å–∞ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π"
        ),
        CollectionStep(
            step=5,
            description="–ü–æ–∏—Å–∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤",
            prompt=f"–ù–∞–π–¥–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π"
        )
    ]
    
    return CollectionPlan(steps=basic_steps)

@app.get("/health")
async def health_check():
    return {"status": "healthy", "service": "hotel-contacts-collector"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
